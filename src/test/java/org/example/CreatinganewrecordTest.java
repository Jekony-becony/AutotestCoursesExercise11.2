package org.example;// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;

public class CreatinganewrecordTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    System.setProperty("webdriver.chrome.driver", "E:\\ChromeDriver\\chromedriver.exe");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void creatinganewrecord() {
    driver.get("https://diary.ru/");
    driver.manage().window().setSize(new Dimension(1536, 864));
    assertTrue(driver.findElement(By.linkText("Вход")).isEnabled());
    driver.findElement(By.linkText("Вход")).click();
    assertTrue(driver.findElement(By.id("loginform-username")).isEnabled());
    driver.findElement(By.id("loginform-username")).click();
    driver.findElement(By.id("loginform-username")).sendKeys("sasha911a");
    assertTrue(driver.findElement(By.id("loginform-password")).isEnabled());
    driver.findElement(By.id("loginform-password")).click();
    driver.findElement(By.id("loginform-password")).sendKeys("Co#gMpVcui");
    driver.switchTo().frame(0);
    assertTrue(driver.findElement(By.cssSelector(".recaptcha-checkbox-border")).isEnabled());
    driver.findElement(By.cssSelector(".recaptcha-checkbox-border")).click();
    driver.switchTo().defaultContent();
    assertTrue(driver.findElement(By.id("login_btn")).isEnabled());
    driver.findElement(By.id("login_btn")).click();
    driver.manage().window().setSize(new Dimension(1536, 864));
    driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
    assertTrue(driver.findElement(By.cssSelector("#writeThisDiary .alt")).isEnabled());
    driver.findElement(By.cssSelector("#writeThisDiary .alt")).click();
    assertTrue(driver.findElement(By.id("postTitle")).isEnabled());
    driver.findElement(By.id("postTitle")).click();
    driver.findElement(By.id("postTitle")).sendKeys("Новая запись");
    driver.switchTo().frame(1);
    assertTrue(driver.findElement(By.cssSelector("html")).isEnabled());
    driver.findElement(By.cssSelector("html")).click();
    {
      WebElement element = driver.findElement(By.id("tinymce"));
      assertTrue(element.isEnabled());
      js.executeScript("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = 'Новая запись в мой дневник'}", element);
    }
    driver.switchTo().defaultContent();
    assertTrue(driver.findElement(By.id("rewrite")).isEnabled());
    driver.findElement(By.id("rewrite")).click();
    System.out.println("Test ended sucessfully!");
  }
}
